basePath: /
definitions:
  models.Comment:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      message:
        type: string
      photoID:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.Photo:
    properties:
      caption:
        type: string
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      createdAt:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.Socialmedia:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  requests.CreateCommentRequest:
    properties:
      message:
        type: string
    type: object
  requests.CreatePhotoRequest:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    type: object
  requests.CreateSocialmediaRequest:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    type: object
  requests.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requests.UserLoginResponse:
    properties:
      token:
        type: string
    type: object
  requests.UserRegisterRequest:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  requests.UserRegisterResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: thefahre@gmail.com
  description: API endpoints for mygram
  title: mygram API - Fahreza
  version: 0.0.1
paths:
  /photos/:
    get:
      consumes:
      - application/json
      description: Get all photos with currently logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Get all photo
      tags:
      - photo
    post:
      consumes:
      - application/json
      description: Create one new photo entry with logged in user
      parameters:
      - description: New Photo Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.CreatePhotoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Create one new photo entry
      tags:
      - photo
  /photos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete photo entry with logged in user (authorized user only)
      parameters:
      - description: ID of photo to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete photo entry
      tags:
      - photo
    get:
      consumes:
      - application/json
      description: Get one photo with currently logged in user
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Get one photo
      tags:
      - photo
    put:
      consumes:
      - application/json
      description: Update photo entry with logged in user (authorized user only)
      parameters:
      - description: ID of photo to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: New Photo Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.CreatePhotoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Update photo entry
      tags:
      - photo
  /photos/{photo_id}/comments:
    get:
      consumes:
      - application/json
      description: Get all comments from one photo with currently logged in user
      parameters:
      - description: ID of the photo to fetch comments from
        in: path
        name: photo_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Get all comments from one photo
      tags:
      - comment
    post:
      consumes:
      - application/json
      description: Create new comment on one photo by id
      parameters:
      - description: ID of the photo to add comment to
        in: path
        name: photo_id
        required: true
        type: integer
      - description: New comment data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Create new comment
      tags:
      - comment
  /photos/{photo_id}/comments/{comment_id}:
    delete:
      consumes:
      - application/json
      description: Delete comment from a photo with logged in user (authorized user
        only)
      parameters:
      - description: ID of photo to delete comment from
        in: path
        name: photo_id
        required: true
        type: integer
      - description: ID of comment to delete
        in: path
        name: comment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete comment
      tags:
      - comment
    get:
      consumes:
      - application/json
      description: Get one comment by comment ID from one photo with currently logged
        in user
      parameters:
      - description: ID of the photo to fetch comments from
        in: path
        name: photo_id
        required: true
        type: integer
      - description: ID of the comment to fetch
        in: path
        name: comment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Get one comment from one photo
      tags:
      - comment
    put:
      consumes:
      - application/json
      description: Update a comment on one photo by both ids
      parameters:
      - description: ID of the photo to update comment to
        in: path
        name: photo_id
        required: true
        type: integer
      - description: ID of the comment to update
        in: path
        name: comment_id
        required: true
        type: integer
      - description: New comment data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Update a comment
      tags:
      - comment
  /socialmedia/:
    get:
      consumes:
      - application/json
      description: Get all socialmedia with currently logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Socialmedia'
      security:
      - Bearer: []
      summary: Get all socialmedia
      tags:
      - socialmedia
    post:
      consumes:
      - application/json
      description: Create one new Socialmedia entry with logged in user
      parameters:
      - description: New Socialmedia Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.CreateSocialmediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Socialmedia'
      security:
      - Bearer: []
      summary: Create one new Socialmedia entry
      tags:
      - socialmedia
  /socialmedia/{id}:
    delete:
      consumes:
      - application/json
      description: Delete socialmedia entry with logged in user (authorized user only)
      parameters:
      - description: ID of socialmedia to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete socialmedia entry
      tags:
      - socialmedia
    get:
      consumes:
      - application/json
      description: Get all socialmedia with currently logged in user
      parameters:
      - description: Socialmedia ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Socialmedia'
      security:
      - Bearer: []
      summary: Get all socialmedia
      tags:
      - socialmedia
    put:
      consumes:
      - application/json
      description: Update Socialmedia entry with logged in user
      parameters:
      - description: ID of socialmedia entry to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: New Socialmedia Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.CreateSocialmediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Socialmedia'
      security:
      - Bearer: []
      summary: Update Socialmedia entry
      tags:
      - socialmedia
  /users/login:
    post:
      consumes:
      - application/json
      description: User login to obtain JWT Beraer token
      parameters:
      - description: Login Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/requests.UserLoginResponse'
      summary: User login
      tags:
      - user
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user via endpoint
      parameters:
      - description: New User Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/requests.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/requests.UserRegisterResponse'
      summary: Register a new user
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Type "Bearer" (CASE SENSITIVE!) followed by a space and JWT token.
      Token is obtained from login.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
